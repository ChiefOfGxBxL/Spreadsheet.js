{
  "name": "Spreadsheet.js",
  "tagline": "A small javascript library for creating spreadsheet style tables",
  "body": "# Spreadsheet.js\r\n_A small javascript library for creating spreadsheet style tables_\r\n\r\n[![](https://img.shields.io/badge/Demo-Live%20Demo-brightgreen.svg?style=flat-square)](https://chiefofgxbxl.github.io/Spreadsheet.js/) [![](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](http://opensource.org/licenses/MIT)\r\n\r\n## Features\r\n * Create tables, large and small\r\n * Columns labeled by letters (A,B,...,AA,...ZZ); rows labeled with line numbers\r\n * Add new columns and rows\r\n * Easily select cells by spreadsheet-style names (A5, G15, etc.)\r\n * Tab through cells to quickly edit them in succession\r\n * Attach event-handlers to table and cell events\r\n\r\n\r\n## Usage\r\n#### Creating a table\r\n```html\r\n<link rel='stylesheet' type='text/css' href='Spreadsheet.css'/>\r\n<script src='Spreadsheet.js'></script>\r\n```\r\n```javascript\r\nvar container = document.getElementById(\"container\"); // have a div handy to hold the table\r\nmyTable = new Spreadsheet({\r\n    rows: 5,\r\n    cols: 10,\r\n    context: container,\r\n    onCellValueChanged: function(cell, old, newv) {\r\n        console.log(old + '->' + newv);\r\n    }\r\n});\r\n```\r\nBy default, cells will not be filled in with any data. If you'd like it to add some random numbers 0-9, set `autofill` to true.\r\n\r\n![](https://github.com/ChiefOfGxBxL/Spreadsheet.js/blob/master/screenshots/Spreadsheet_Basic.PNG)\r\n\r\n#### Options\r\nBelow are all of the options that can be specified when creating a spreadsheet, including spreadsheet size, data, and event-handlers. **Options preceded by an asterisk (*) are required**! \r\n\r\n```javascript\r\noptions: {\r\n    *rows: <Integer>,\r\n    *cols: <Integer>,\r\n    data: <Array<Array>> // overrides rows and cols if present\r\n    *context: <HTMLElement>,\r\n    \r\n    autofill: <Boolean>,\r\n    \r\n    // Event-handlers\r\n    onCellValueChanged: <function(<HTMLElement> cell, <String> oldValue, <String> newValue)>,\r\n    onCellClick: <function(<HTMLElement> cell)>,\r\n    onCellDblClick: <function(<HTMLElement> cell)>,\r\n    onCellFocused: <function(<HTMLElement> cell)>,\r\n    onNewRow: <function()>,\r\n    onNewCol: <function()>\r\n}\r\n```\r\n\r\n#### Populate spreadsheet with data\r\nA spreadsheet can be automatically populated with values by using the *data* option. This is done by providing an array of arrays. The children arrays each present a row in the table, with the elements corresponding to columns.\r\n\r\nE.g. \r\n```javascript\r\n[\r\n\t[1,2,3],\r\n\t[4,5,6],\r\n\t[7,8,9]\r\n]\r\n```\r\ncreates a spreadsheet with three rows and three columns. Row one will contain the values 1,2,3, row two: 4,5,6, and row three: 7,8,9. The spreadsheet will be sized accordingly, and will always be large enough to hold the data, leaving other cells blank if needed.\r\n\r\n#### Select a cell\r\n```javascript\r\n// Selecting a cell returns the <td> HTMLElement\r\n// Note: row and col are 0-index based, so (0,0) corresponds to \"A1\"\r\nmyTable.selectCell(0,0); // select the cell in the top-left most corner\r\n\r\n// Getting cell content can be done by using the below function\r\n// Recommendation: Use the cell name when calling cellContent. While the 0-index based coordinates may be given, it can be more confusing and may lead to off-by-one errors\r\nmyTable.cellContent(\"G7\"); // select the cell in column G, row 7\r\nmyTable.cellContent(6, 6); // select the cell in (6, 6), AKA \"G7\"\r\n```\r\nNote that when selecting cells, you may only select \"content cells\". That is, it is not possible to select the header cells marked by letters or the row numberings. These are included with .getRows and .getCols, however:\r\n\r\n#### Select all rows / columns\r\n```javascript\r\nmyTable.getRows(); // Returns an array of HTMLElement <tr>'s\r\nmyTable.getCols(); // Returns an array of columns, where each column is an array containing HTMLElement <td>'s\r\n```\r\n\r\n#### Size of table\r\nThese should be self-explanatory\r\n```javascript\r\nmyTable.getRowCount();\r\nmyTable.getColCount();\r\nmyTable.getSize(); // returns a duple: [row,col]\r\n```\r\n\r\n#### Edit a cell\r\nSimply __click__ the cell and type something in.\r\nSkip to the next cell using your `Tab` key, or `Shift-Tab` to go back a cell:\r\n\r\n![](https://github.com/ChiefOfGxBxL/Spreadsheet.js/blob/master/screenshots/Spreadsheet_Tab.png)\r\n\r\n## Contributing\r\nHelp would be greatly appreciated. Feel free to grab a task from the issue tracker, or suggest your own improvement!\r\n\r\nCreate a fork of this repository, claim some issues and work on them, and then submit a merge request!\r\n\r\n\r\n## License\r\nSpreadsheet.js is available under the [MIT License](http://opensource.org/licenses/MIT).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}